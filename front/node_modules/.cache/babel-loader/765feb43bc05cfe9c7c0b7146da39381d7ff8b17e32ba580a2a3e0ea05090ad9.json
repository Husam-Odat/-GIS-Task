{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\husam\\\\Desktop\\\\arc gis task\\\\newinfograph\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useContext } from 'react';\nimport './styles.css';\nimport \"leaflet/dist/leaflet.css\";\nimport { MapContainer, TileLayer, Marker, Popup } from \"react-leaflet\";\nimport { Icon } from \"leaflet\";\nimport MarkerClusterGroup from 'react-leaflet-cluster';\nimport axios from 'axios';\n\n// Create a context to manage markers globally\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MarkersContext = /*#__PURE__*/React.createContext();\nexport default function App() {\n  _s();\n  const [data, setData] = useState([]);\n  const [markers, setMarkers] = useState([]);\n  const [newMarker, setNewMarker] = useState(null);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await axios.get('http://localhost:3001/maps');\n        setData(response.data);\n      } catch (error) {\n        console.error('Error:', error);\n      }\n    };\n    fetchData();\n  }, []);\n\n  // Listen for newMarker changes and update markers when newMarker is set\n  useEffect(() => {\n    if (newMarker) {\n      setMarkers([...markers, newMarker]);\n      setNewMarker(null); // Reset newMarker\n    }\n  }, [newMarker, markers]);\n  const customIcon = new Icon({\n    iconUrl: require(\"./img/google-maps.png\"),\n    iconSize: [38, 38]\n  });\n  return /*#__PURE__*/_jsxDEV(MarkersContext.Provider, {\n    value: setNewMarker,\n    children: /*#__PURE__*/_jsxDEV(MapContainer, {\n      center: [48.8566, 2.3522],\n      zoom: 13,\n      style: {\n        height: \"100vh\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n        attribution: \"\\xA9 <a href=\\\"https://www.openstreetmap.org/copyright\\\">OpenStreetMap</a> contributors\",\n        url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MarkerClusterGroup, {\n        children: markers.map((marker, index) => /*#__PURE__*/_jsxDEV(Marker, {\n          position: marker.geocode,\n          icon: customIcon,\n          children: /*#__PURE__*/_jsxDEV(Popup, {\n            children: marker.popUp\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 15\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"3MeetsC2shHcLBkl1E+VOEuk7QQ=\");\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useContext","MapContainer","TileLayer","Marker","Popup","Icon","MarkerClusterGroup","axios","jsxDEV","_jsxDEV","MarkersContext","createContext","App","_s","data","setData","markers","setMarkers","newMarker","setNewMarker","fetchData","response","get","error","console","customIcon","iconUrl","require","iconSize","Provider","value","children","center","zoom","style","height","attribution","url","fileName","_jsxFileName","lineNumber","columnNumber","map","marker","index","position","geocode","icon","popUp","_c","$RefreshReg$"],"sources":["C:/Users/husam/Desktop/arc gis task/newinfograph/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useContext } from 'react';\nimport './styles.css';\nimport \"leaflet/dist/leaflet.css\";\nimport { MapContainer, TileLayer, Marker, Popup } from \"react-leaflet\";\nimport { Icon } from \"leaflet\";\nimport MarkerClusterGroup from 'react-leaflet-cluster';\nimport axios from 'axios';\n\n// Create a context to manage markers globally\nconst MarkersContext = React.createContext();\n\nexport default function App() {\n  const [data, setData] = useState([]);\n  const [markers, setMarkers] = useState([]);\n  const [newMarker, setNewMarker] = useState(null);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await axios.get('http://localhost:3001/maps');\n        setData(response.data);\n      } catch (error) {\n        console.error('Error:', error);\n      }\n    };\n    fetchData();\n  }, []);\n\n  // Listen for newMarker changes and update markers when newMarker is set\n  useEffect(() => {\n    if (newMarker) {\n      setMarkers([...markers, newMarker]);\n      setNewMarker(null); // Reset newMarker\n    }\n  }, [newMarker, markers]);\n\n  const customIcon = new Icon({\n    iconUrl: require(\"./img/google-maps.png\"),\n    iconSize: [38, 38],\n  });\n\n  return (\n    <MarkersContext.Provider value={setNewMarker}>\n      <MapContainer center={[48.8566, 2.3522]} zoom={13} style={{ height: \"100vh\" }}>\n        <TileLayer\n          attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n          url='https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png'\n        />\n        <MarkerClusterGroup>\n          {markers.map((marker, index) => (\n            <Marker key={index} position={marker.geocode} icon={customIcon}>\n              <Popup>{marker.popUp}</Popup>\n            </Marker>\n          ))}\n        </MarkerClusterGroup>\n      </MapContainer>\n    </MarkersContext.Provider>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}