[{"C:\\Users\\husam\\Desktop\\arc gis task\\newinfograph\\src\\index.js":"1","C:\\Users\\husam\\Desktop\\arc gis task\\newinfograph\\src\\App.js":"2","C:\\Users\\husam\\Desktop\\arc gis task\\newinfograph\\src\\reportWebVitals.js":"3","C:\\Users\\husam\\Desktop\\arc gis task\\newinfograph\\src\\Form.js":"4","C:\\Users\\husam\\Desktop\\arc gis task\\newinfograph\\src\\App1.js":"5"},{"size":692,"mtime":1699054041348,"results":"6","hashOfConfig":"7"},{"size":1736,"mtime":1699030763918,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":1698745969131,"results":"9","hashOfConfig":"7"},{"size":10029,"mtime":1699055201823,"results":"10","hashOfConfig":"7"},{"size":2889,"mtime":1699049096736,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","suppressedMessages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"2ucvlv",{"filePath":"15","messages":"16","suppressedMessages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18","usedDeprecatedRules":"19"},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"19"},"C:\\Users\\husam\\Desktop\\arc gis task\\newinfograph\\src\\index.js",["30","31"],[],"C:\\Users\\husam\\Desktop\\arc gis task\\newinfograph\\src\\App.js",["32","33"],[],"import React, { useState, useEffect } from 'react';\nimport './styles.css';\nimport \"leaflet/dist/leaflet.css\";\nimport { MapContainer, TileLayer, Marker, Popup } from \"react-leaflet\";\nimport { Icon, point, divIcon } from \"leaflet\";\nimport MarkerClusterGroup from 'react-leaflet-cluster';\nimport axios from 'axios';\n\n\n\nexport default function App() {\n  const [data, setData] = useState([]);\n  const [markers, setMarkers] = useState([]);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await axios.get('http://localhost:3001/maps');\n        setData(response.data);\n      } catch (error) {\n        console.error('Error:', error);\n      }\n    };\n    fetchData();\n  }, [data]);\n\n  useEffect(() => {\n    const newMarkers = data.map((item) => ({\n      geocode: [item.LAT, item.LNG],\n      popUp: `${data.Notes}`,\n    }));\n    setMarkers(newMarkers);\n  }, [data]);\n\n  const customIcon = new Icon({\n    iconUrl: require(\"./img/google-maps.png\"),\n    iconSize: [38, 38],\n  });\n\n  return (\n    <MapContainer center={[48.8566, 2.3522]} zoom={13} style={{ height: \"100vh\" }} >\n      <TileLayer\n        attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n        url='https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png'\n      />\n      <MarkerClusterGroup>\n        {markers.map((marker, index) => (\n          <Marker key={index} position={marker.geocode} icon={customIcon}   >\n            {/* <Popup>{marker.popUp}</Popup> */}\n            <Popup>'hallo'</Popup>\n          </Marker>\n        ))}\n      </MarkerClusterGroup>\n      <div className='mapdot'><img src='%publicurl%/img/google-maps.png' alt='Google Maps Icon' />\n\n </div>\n    </MapContainer>\n  );\n}\n",["34"],"C:\\Users\\husam\\Desktop\\arc gis task\\newinfograph\\src\\reportWebVitals.js",[],[],"C:\\Users\\husam\\Desktop\\arc gis task\\newinfograph\\src\\Form.js",[],[],"C:\\Users\\husam\\Desktop\\arc gis task\\newinfograph\\src\\App1.js",["35","36","37","38","39"],[],"import \"./styles.css\";\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport \"leaflet/dist/leaflet.css\";\r\nimport { useState, useRef, useMemo, useCallback, useEffect } from 'react';\r\nimport { MapContainer, TileLayer, Marker, Popup } from \"react-leaflet\";\r\nimport MarkerClusterGroup from \"react-leaflet-cluster\";\r\nimport Form from './Form'; // Import the Form component\r\nimport { Icon, divIcon, point } from \"leaflet\";\r\nimport axios from 'axios';\r\n\r\nconst center = [31.951591711679697, 35.93934368582822];\r\nconst zoom = 19;\r\n\r\nexport default function App1() {\r\n    const [data, setData] = useState([]);\r\n    const [markers, setMarkers] = useState([]);\r\n    const [position, setPosition] = useState(center); // Initialize position state\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                const response = await axios.get('http://localhost:3001/maps');\r\n                setData(response.data);\r\n            } catch (error) {\r\n                console.error('Error:', error);\r\n            }\r\n        };\r\n        fetchData();\r\n    }, [data]); // Only run once when the component mounts\r\n\r\n    useEffect(() => {\r\n        const newMarkers = data.map((item) => ({\r\n            geocode: [item.LAT, item.LNG],\r\n            popUp: item.Notes, // Use item.Notes for popup content\r\n        }));\r\n        setMarkers(newMarkers);\r\n    }, [data]);\r\n\r\n    const customIcon = new Icon({\r\n        iconUrl: require(\"./img/google-maps.png\"),\r\n        iconSize: [38, 38],\r\n    });\r\n\r\n    const [map, setMap] = useState(null);\r\n\r\n    useEffect(() => {\r\n        if (map) {\r\n            map.on('move', () => {\r\n                setPosition(map.getCenter()); // Update position state\r\n            });\r\n        }\r\n    }, [map]);\r\n\r\n    return (\r\n        <div className=\"container\">\r\n        <div className=\"row\">\r\n        <div className=\"suctionMap col-10\">\r\n            <MapContainer\r\n                center={center}\r\n                zoom={zoom}\r\n                ref={setMap}\r\n            >\r\n                <TileLayer\r\n                    attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\r\n                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                />\r\n                <MarkerClusterGroup>\r\n                    {markers.map((marker, index) => (\r\n                        <Marker key={index} position={marker.geocode} icon={customIcon}>\r\n                            <Popup>{marker.popUp}</Popup>\r\n                        </Marker>\r\n                    ))}\r\n                </MarkerClusterGroup>\r\n            </MapContainer>\r\n            <div className=\"mapdot\"></div>\r\n            </div>\r\n\r\n            <div className=\"col-2\">\r\n            <Form position={position} /> {/* Pass position state to Form */}\r\n                </div>\r\n        \r\n        </div>\r\n        </div>\r\n    );\r\n}\r\n",{"ruleId":"40","severity":1,"message":"41","line":4,"column":8,"nodeType":"42","messageId":"43","endLine":4,"endColumn":11},{"ruleId":"40","severity":1,"message":"44","line":5,"column":8,"nodeType":"42","messageId":"43","endLine":5,"endColumn":12},{"ruleId":"40","severity":1,"message":"45","line":5,"column":16,"nodeType":"42","messageId":"43","endLine":5,"endColumn":21},{"ruleId":"40","severity":1,"message":"46","line":5,"column":23,"nodeType":"42","messageId":"43","endLine":5,"endColumn":30},{"ruleId":"47","replacedBy":"48"},{"ruleId":"40","severity":1,"message":"49","line":4,"column":20,"nodeType":"42","messageId":"43","endLine":4,"endColumn":26},{"ruleId":"40","severity":1,"message":"50","line":4,"column":28,"nodeType":"42","messageId":"43","endLine":4,"endColumn":35},{"ruleId":"40","severity":1,"message":"51","line":4,"column":37,"nodeType":"42","messageId":"43","endLine":4,"endColumn":48},{"ruleId":"40","severity":1,"message":"46","line":8,"column":16,"nodeType":"42","messageId":"43","endLine":8,"endColumn":23},{"ruleId":"40","severity":1,"message":"45","line":8,"column":25,"nodeType":"42","messageId":"43","endLine":8,"endColumn":30},"no-unused-vars","'App' is defined but never used.","Identifier","unusedVar","'Form' is defined but never used.","'point' is defined but never used.","'divIcon' is defined but never used.","no-new-object",["52"],"'useRef' is defined but never used.","'useMemo' is defined but never used.","'useCallback' is defined but never used.","no-object-constructor"]